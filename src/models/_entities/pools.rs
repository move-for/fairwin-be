//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "pools")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pool_id: String,
    pub price: i32,
    pub type_name: String,
    pub pool_type: String,
    pub start_time: DateTimeWithTimeZone,
    pub end_time: DateTimeWithTimeZone,
    pub drawn_time: Option<DateTimeWithTimeZone>,
    pub lucky_number: Option<String>,
    pub round: Option<i32>,
    pub epoch: Option<i32>,
    pub is_active: bool,
    pub contract_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contracts::Entity",
        from = "Column::ContractId",
        to = "super::contracts::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Contracts,
}

impl Related<super::contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contracts.def()
    }
}
